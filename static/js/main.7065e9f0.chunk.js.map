{"version":3,"sources":["components/Card.js","components/CardList.js","components/robots.js","components/Searchbox.js","components/Scroll.js","containers/App.js","components/ErrorBoundary.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","height","width","name","username","email","CardList","robots","cardComponent","map","_item","i","key","SearchBox","SearchChange","type","placeholder","onChange","Scroll","style","overflowY","border","children","App","Component","onSearchChange","event","setState","searchField","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","Searchbox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GACZ,OACE,yBAAKC,UAAU,0DACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,IAAMC,OAAO,MAAMC,MAAM,QAC5E,6BACE,4BAAKN,EAAMO,MACX,uBAAGN,UAAU,QAAb,aAAgCD,EAAMQ,UACtC,sCAAYR,EAAMS,UCgBbC,EAtBI,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIbC,EAAgBD,EAAOE,KAAI,SAACC,EAAOC,GACvC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAIO,EAAOI,GAAGX,GACdG,KAAMI,EAAOI,GAAGR,KAChBE,MAAOE,EAAOI,GAAGN,MACjBD,SAAUG,EAAOI,GAAGP,cAI1B,OACE,6BACGI,EADH,MCnBSD,EAAS,CAClB,CACEP,GAAI,EACJG,KAAM,gBACNC,SAAU,SACVC,MAAO,qBAET,CACEL,GAAI,EACJG,KAAM,eACNC,SAAU,YACVC,MAAO,oBAET,CACEL,GAAI,EACJG,KAAM,eACNC,SAAU,gBACVC,MAAO,qBAET,CACEL,GAAI,EACJG,KAAM,aACNC,SAAU,YACVC,MAAO,wBAET,CACEL,GAAI,EACJG,KAAM,iBACNC,SAAU,QACVC,MAAO,qBAET,CACEL,GAAI,EACJG,KAAM,iBACNC,SAAU,UACVC,MAAO,sBAET,CACEL,GAAI,EACJG,KAAM,iBACNC,SAAU,YACVC,MAAO,sBAET,CACEL,GAAI,EACJG,KAAM,iBACNC,SAAU,eACVC,MAAO,qBAET,CACEL,GAAI,EACJG,KAAM,gBACNC,SAAU,cACVC,MAAO,2BAET,CACEL,GAAI,GACJG,KAAM,iBACNC,SAAU,cACVC,MAAO,2BC5CEQ,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKjB,UAAU,OACb,2BACEA,UAAY,oCACZkB,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCCLI,EARA,SAACtB,GACd,OACE,yBAAKuB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBpB,OAAQ,UAClEL,EAAM0B,WCiCEC,GCpCaC,Y,wDDQ1B,aAAc,IAAD,8BACX,gBAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAP1C,EAAKC,MAAQ,CACXxB,OAAQA,EACRqB,YAAa,IAJJ,E,qDAYH,IAAD,OACDI,EAAiBC,KAAKF,MAAMxB,OAAO2B,QAAO,SAAAC,GAC9C,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAS,EAAKN,MAAMH,YAAYQ,kBAElE,OACE,yBAAKvC,UAAY,MACf,wBAAIA,UAAW,MAAf,eACA,kBAACyC,EAAD,CAAWxB,aAAcmB,KAAKR,iBAC9B,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUlB,OAAQyB,U,GAvBXR,cEIEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7065e9f0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br2 pa3 ma2 grow ba bw1 shadow-5'>\r\n      <img alt=\"robots\" src={`https://robohash.org/${props.id}`} height=\"150\" width=\"200\"/>\r\n        <div>\r\n          <h2>{props.name}</h2>\r\n          <p className='f5 i' >UserName: {props.username}</p>\r\n          <p>E-mail: {props.email}</p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n  const CardList = ({robots}) => {\r\n//   if(true) {\r\n//     throw new Error('Noooooooo!!!');\r\n//   }\r\n  const cardComponent = robots.map((_item, i) => {\r\n    return ( \r\n      <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email} \r\n        username={robots[i].username}/>\r\n      );\r\n    })\r\n    \r\n  return ( \r\n    <div>\r\n      {cardComponent};    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Saurabh Singh',\r\n      username: 'udhari',\r\n      email: 'bndai@example.com'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ishu Kashyap',\r\n      username: 'illi.Kyon',\r\n      email: 'illi@example.com'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Brijesh Hano',\r\n      username: 'brijesh.safar',\r\n      email: 'safar@example.com'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'vishwajeet',\r\n      username: 'taklaBaba',\r\n      email: 'dregnous@example.com'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Abhijeet Singh',\r\n      username: 'nalla',\r\n      email: 'nalla@example.com'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Ashutosh Kumar',\r\n      username: 'BadeLog',\r\n      email: 'babaJi@example.com'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Pushpraj Singh',\r\n      username: 'RDX#NINJA',\r\n      email: 'prs853@example.com'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Abhishek Singh',\r\n      username: 'harami.ladka',\r\n      email: 'Romeo@example.com'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'random bnda 1',\r\n      username: 'random.bnda',\r\n      email: 'randombnda1@example.com'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'random bandi 1',\r\n      username: 'random.bndi',\r\n      email: 'randombndi@example.com'\r\n    }\r\n  ];","import React from 'react';\r\n\r\nconst SearchBox = ({ SearchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        className = 'pa3 ba b-- green bg-lightest-blue'\r\n        type = 'search' \r\n        placeholder = 'Search Robots'\r\n        onChange = {SearchChange} >\r\n      </input>\r\n    </div>    \r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '0px solid black', height: '500px'}} >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport { robots } from '../components/robots';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      robots: robots,\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchField: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()) ;\r\n    })\r\n    return (\r\n      <div className = 'tc'>\r\n        <h1 className= 'f1'>RoboFriends</h1>\r\n        <Searchbox SearchChange={this.onSearchChange}/>\r\n        <Scroll>\r\n           <CardList robots={filteredRobots}/>\r\n        </Scroll>  \r\n      </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({ hasError: true});\r\n  }\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <p className='tc err-msz '>Ooops. Sorry, We're facing some Trouble</p>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <App/>   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}